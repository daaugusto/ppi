case T_IF_THEN_ELSE:
   stack_top = ( (stack[stack_top] == 1.0f) ? stack_top - 1 : stack_top - 2 );
   break;
case T_AND:
   stack[stack_top - 1] = ( (stack[stack_top] == 1.0f && stack[stack_top - 1] == 1.0f) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_OR:
   stack[stack_top - 1] = ( (stack[stack_top] == 1.0f || stack[stack_top - 1] == 1.0f) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_XOR:
   stack[stack_top - 1] = ((stack[stack_top] <= 0.0f && stack[stack_top-1] > 0.0f) || (stack[stack_top] > 0.0f && stack[stack_top-1] <= 0.0f));
   --stack_top;
   break;
case T_NOT:
   stack[stack_top] = !(int) stack[stack_top];
   break;
case T_GREATER:
   stack[stack_top - 1] = ( (stack[stack_top] > stack[stack_top - 1]) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_GREATEREQUAL:
   stack[stack_top - 1] = ( (stack[stack_top] >= stack[stack_top - 1]) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_LESS:
   stack[stack_top - 1] = ( (stack[stack_top] < stack[stack_top - 1]) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_LESSEQUAL:
   stack[stack_top - 1] = ( (stack[stack_top] <= stack[stack_top - 1]) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_EQUAL:
   stack[stack_top - 1] = ( (stack[stack_top] == stack[stack_top - 1]) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_NOTEQUAL:
   stack[stack_top - 1] = ( (stack[stack_top] != stack[stack_top - 1]) ? 1.0f : 0.0f );
   --stack_top;
   break;
case T_ADD:
   stack[stack_top - 1] = stack[stack_top] + stack[stack_top - 1];
   --stack_top;
   break;
case T_SUB:
   stack[stack_top - 1] = stack[stack_top] - stack[stack_top - 1];
   --stack_top;
   break;
case T_MULT:
   stack[stack_top - 1] = stack[stack_top] * stack[stack_top - 1];
   --stack_top;
   break;
#ifdef UNPROTECTED_FUNCTIONS
case T_DIV:
   stack[stack_top - 1] = stack[stack_top] / stack[stack_top - 1];
   --stack_top;
   break;
#else
case T_DIV:
   stack[stack_top - 1] = (stack[stack_top-1] == 0.0f ? 1.0f : stack[stack_top] / stack[stack_top - 1]);
   --stack_top;
   break;
#endif
case T_MEAN:
   stack[stack_top - 1] = (stack[stack_top] + stack[stack_top - 1]) / 2.0f;
   --stack_top;
   break;
case T_MAX:
   stack[stack_top - 1] = fmax(stack[stack_top], stack[stack_top - 1]);
   --stack_top;
   break;
case T_MIN:
   stack[stack_top - 1] = fmin(stack[stack_top], stack[stack_top - 1]);
   --stack_top;
   break;
case T_MOD:
   stack[stack_top - 1] = fmod(stack[stack_top], stack[stack_top - 1]);
   --stack_top;
   break;
case T_POW:
   stack[stack_top-1] = pow(stack[stack_top], stack[stack_top-1]);
   --stack_top;
   break;
case T_ABS:
   stack[stack_top] = fabs(stack[stack_top]);
   break;
#ifdef UNPROTECTED_FUNCTIONS
case T_SQRT:
   stack[stack_top] = sqrt(stack[stack_top]);
   break;
#else
case T_SQRT:
   stack[stack_top] = (stack[stack_top] < 0.0f ? 1.0f : sqrt(stack[stack_top]));
   break;
#endif
case T_POW2:
   stack[stack_top] = stack[stack_top] * stack[stack_top];
   break;
case T_POW3:
   stack[stack_top] = stack[stack_top] * stack[stack_top] * stack[stack_top];
   break;
case T_POW4:
   stack[stack_top] = stack[stack_top] * stack[stack_top] * stack[stack_top] * stack[stack_top];
   break;
case T_POW5:
   stack[stack_top] = stack[stack_top] * stack[stack_top] * stack[stack_top] * stack[stack_top] * stack[stack_top];
   break;
case T_NEG:
   stack[stack_top] = -stack[stack_top];
   break;
case T_ROUND:
   stack[stack_top] = round(stack[stack_top]);
   break;
case T_CEIL:
   stack[stack_top] = ceil(stack[stack_top]);
   break;
case T_FLOOR:
   stack[stack_top] = floor(stack[stack_top]);
   break;
case T_EXP:
   stack[stack_top] = exp(stack[stack_top]);
   break;
case T_EXP10:
   stack[stack_top] = exp10(stack[stack_top]);
   break;
case T_EXP2:
   stack[stack_top] = exp2(stack[stack_top]);
   break;
#ifdef UNPROTECTED_FUNCTIONS
case T_LOG:
   stack[stack_top] = log(stack[stack_top]);
   break;
case T_LOG10:
   stack[stack_top] = log10(stack[stack_top]);
   break;
case T_LOG2:
   stack[stack_top] = log2(stack[stack_top]);
   break;
#else
case T_LOG:
   stack[stack_top] = (stack[stack_top] < 1.0f ? 1.0f : log(stack[stack_top]));
   break;
case T_LOG10:
   stack[stack_top] = (stack[stack_top] < 1.0f ? 1.0f : log10(stack[stack_top]));
   break;
case T_LOG2:
   stack[stack_top] = (stack[stack_top] < 1.0f ? 1.0f : log2(stack[stack_top]));
   break;
#endif
case T_SIN:
   stack[stack_top] = sin(stack[stack_top]);
   break;
case T_COS:
   stack[stack_top] = cos(stack[stack_top]);
   break;
#ifdef UNPROTECTED_FUNCTIONS
case T_TAN:
   stack[stack_top] = tan(stack[stack_top]);
   break;
#else
case T_TAN:
   stack[stack_top] = ((fabs(stack[stack_top]) == M_PI_2_F || fabs(stack[stack_top]) == 3.0f*M_PI_2_F) ? 1.0 : tan(stack[stack_top]));
   break;
#endif
case T_STEP:
   stack[stack_top] = (stack[stack_top] >= 0.0f);
   break;
case T_SIGN:
   stack[stack_top] = (stack[stack_top] > 0.0f ? 1.0f : (stack[stack_top] < 0.0f ? -1.0f : 0.0f));
   break;
case T_LOGISTIC:
   stack[stack_top] = (1.0f/(1.0f + exp(-stack[stack_top])));
   break;
case T_GAMMA:
   stack[stack_top] = pow((stack[stack_top]/M_E_F)*sqrt(stack[stack_top]*sinh(1/stack[stack_top])),stack[stack_top])*sqrt(2.0f*M_PI_F/stack[stack_top]);
   break;
case T_GAUSS:
   stack[stack_top] = exp(-stack[stack_top]*stack[stack_top]);
   break;
case T_PI:
   stack[++stack_top] = M_PI_F;
   break;
case T_PI_2:
   stack[++stack_top] = M_PI_2_F;
   break;
case T_PI_4:
   stack[++stack_top] = M_PI_4_F;
   break;
case T_1_PI:
   stack[++stack_top] = M_1_PI_F;
   break;
case T_2_PI:
   stack[++stack_top] = M_2_PI_F;
   break;
case T_2_SQRTPI:
   stack[++stack_top] = M_2_SQRTPI_F;
   break;
case T_SQRT2:
   stack[++stack_top] = M_SQRT2_F;
   break;
case T_SQRT1_2:
   stack[++stack_top] = M_SQRT1_2_F;
   break;
case T_E:
   stack[++stack_top] = M_E_F;
   break;
case T_LOG2E:
   stack[++stack_top] = M_LOG2E_F;
   break;
case T_LOG10E:
   stack[++stack_top] = M_LOG10E_F;
   break;
case T_LN2:
   stack[++stack_top] = M_LN2_F;
   break;
case T_LN10:
   stack[++stack_top] = M_LN10_F;
   break;
case T_0:
   stack[++stack_top] = 0.0f;
   break;
case T_1:
   stack[++stack_top] = 1.0f;
   break;
case T_2:
   stack[++stack_top] = 2.0f;
   break;
case T_3:
   stack[++stack_top] = 3.0f;
   break;
case T_4:
   stack[++stack_top] = 4.0f;
   break;
case T_5:
   stack[++stack_top] = 5.0f;
   break;
case T_6:
   stack[++stack_top] = 6.0f;
   break;
case T_7:
   stack[++stack_top] = 7.0f;
   break;
case T_8:
   stack[++stack_top] = 8.0f;
   break;
case T_9:
   stack[++stack_top] = 9.0f;
   break;
case T_N1:
   stack[++stack_top] = -1.0f;
   break;
case T_N2:
   stack[++stack_top] = -2.0f;
   break;
case T_N3:
   stack[++stack_top] = -3.0f;
   break;
case T_N4:
   stack[++stack_top] = -4.0f;
   break;
case T_N5:
   stack[++stack_top] = -5.0f;
   break;
case T_N6:
   stack[++stack_top] = -6.0f;
   break;
case T_N7:
   stack[++stack_top] = -7.0f;
   break;
case T_N8:
   stack[++stack_top] = -8.0f;
   break;
case T_N9:
   stack[++stack_top] = -9.0f;
   break;
