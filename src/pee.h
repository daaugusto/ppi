/** TAD: PEE **/

#ifndef pee_h
#define pee_h

#include "client/client.h"
#include "Poco/ThreadPool.h"

/** Funcoes exportadas **/
/** ****************************************************************************************** **/
/** ************************************* Function init ************************************** **/
/** ****************************************************************************************** **/
/**                                                                                            **/
/** ****************************************************************************************** **/
void pee_init( float** input, int nlin, int ncol, int argc, char** argv );

/** ****************************************************************************************** **/
/** ************************************* Function evolve ************************************ **/
/** ****************************************************************************************** **/
/**                                                                                            **/
/** ****************************************************************************************** **/
int pee_evolve();

/** ****************************************************************************************** **/
/** ********************************** Function print_best *********************************** **/
/** ****************************************************************************************** **/
/**                                                                                            **/
/** ****************************************************************************************** **/
void pee_print_best( FILE* out, int generation, int print_mode );

/** ****************************************************************************************** **/
/** ********************************** Function print_time *********************************** **/
/** ****************************************************************************************** **/
/**                                                                                            **/
/** ****************************************************************************************** **/
void pee_print_time( bool total=false );

/** ****************************************************************************************** **/
/** ************************************ Function destroy ************************************ **/
/** ****************************************************************************************** **/
/**                                                                                            **/
/** ****************************************************************************************** **/
void pee_destroy();

/******************************************************************************/
class Pool {
public:

   Pool(unsigned size): ss(size, NULL), clients(size, NULL)
   {
      /* Expands defaultPool() if the available number of threads is less than
       * the number of peers, otherwise the exception "No thread available" is
       * thrown. */
      if (Poco::ThreadPool::defaultPool().available() < size)
         Poco::ThreadPool::defaultPool().addCapacity(size - (Poco::ThreadPool::defaultPool().available()));

      // Create an array of mutexes (one for each id)
      mutexes = new Poco::FastMutex[size];

      // Create and initialize an array of isrunning's (one for each id)
      isrunning = new bool[size];
      for (unsigned i = 0; i < size; i++) isrunning[i] = false;
   }

   ~Pool()
   {
      // Clean up!

      delete[] isrunning;
      delete[] mutexes;

      for (unsigned i = 0; i < clients.size(); i++)
      {
         delete clients[i];
         delete ss[i];
      }
   }

   std::vector<StreamSocket*> ss;
   std::vector<Client*> clients;

   bool * isrunning;
   Poco::FastMutex * mutexes;
};
/******************************************************************************/

#endif

